syntax = "proto3";

package chat;

import "common_peer.proto";
import "chat-svc/v1/message/message_entity.proto";

// Inputs are the request messages/objects that the client sends to the server as part of the service call requests.
// Request Message for `Message_Send` RPC.
message MessageSendRequest {
    // Unique client message ID required to prevent message resending.
    // Every messsage should be sent with a new unique ID.
    // format should be a Nanoid string 12-16 characters in length.
    string unique_id = 1;

    // ID of the user sending the message. TODO: Convert the source of this to the JWT token.
    int64 owner_id = 2;

    // owning container of the message -- channel, topic or chat_group
    PeerInput input_peer = 3;

    // The actual message
    string Message = 4;

    // ID of the message being forwarded
    optional int64 fwd_from_msg_id = 5;

    // ID of the message being replied to
    optional int64 reply_to_msg_id = 6;

    // This field is required for channel posts. The top_msg_id is the 
    // channel post message id that owns the message thread for replies
    // For topics and chat groups, this field is not applicable
    optional int64 top_msg_id = 7;

    repeated MessageEntity entities = 8;

    // flag indicating the sender of the message is a channel
    optional PeerInput send_as = 9;

    // Send this message silently (no notifications for the receivers)
    bool silent = 10;
}

