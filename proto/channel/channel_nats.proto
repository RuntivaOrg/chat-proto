syntax = "proto3";

package chat;

import "channel/channel_inputs.proto";
import "channel/channel.proto";
//import "channel/channel_shared.proto";

import "nats/v1/entities.proto";

// NATS Specific messages that are used internally on the server-side to offboard request processing 
// from the ChatServer to the backend services. 

// ********** Channel_Create ********** //
// Backend NATS messaging for `Channel_Create`: Request to create a new chat group
message NatsChannelCreateRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelCreateRequest data = 2;
}

message NatsChannelCreateResponse {
  oneof msg {
    Channel data = 1;
    runtiva.nats.v1.ErrorReply error = 2;
  }
}

// ********** Channel_EditAdmin ********** //
// Backend NATS messaging for `Channel_EditAdmin`: Edits admin rights of the channel
message NatsChannelEditAdminRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEditAdminRequest data = 2;
}

// ********** Channel_EditOwner ********** //
// Backend NATS messaging for `Channel_EditOwner`: Assigns channel ownership to another user
message NatsChannelEditOwnerRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEditOwnerRequest data = 2;
}

// ********** Channel_EditParticipant ********** //
// Backend NATS messaging for `Channel_EditParticipant`: Edits participant rights of the channel
message NatsChannelEditParticipantRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEditParticipantRequest data = 2;
}

// ********** Channel_EditPhoto ********** //
// Backend NATS messaging for `Channel_EditPhoto`: Edits the photo of the channel
message NatsChannelEditPhotoRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEditPhotoRequest data = 2;
}

// ********** Channel_EditTitle ********** //
// Backend NATS messaging for `Channel_EditTitle`: Edits the title of the channel
message NatsChannelEditTitleRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEditTitleRequest data = 2;
}

// ********** Channel_EditAbout ********** //
// Backend NATS messaging for `Channel_EditAbout`: Edits the about of the channel
message NatsChannelEditAboutRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEditAboutRequest data = 2;
}

// ********** Channel_Delete ********** //
// Backend NATS messaging for `Channel_Delete`: Deletes a channel
message NatsChannelDeleteRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelDeleteRequest data = 2;
}

// ********** Channel_Disable ********** //
// Backend NATS messaging for `Channel_Disable`: Disables/Enables a channel
message NatsChannelDisableRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelDisableRequest data = 2;
}

// ********** Channel_EnablePrehistory ********** //
// Backend NATS messaging for `Channel_EnablePrehistory`: Enables prehistory for a channel
message NatsChannelEnablePrehistoryRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelEnablePrehistoryRequest data = 2;
}

// ********** Channel_ShowSignatures ********** //
// Backend NATS messaging for `Channel_ShowSignatures`: Shows signatures for a channel
message NatsChannelShowSignaturesRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelShowSignaturesRequest data = 2;
}

// ********** Channel_SetJoinToSend ********** //
// Backend NATS messaging for `Channel_SetJoinToSend`: Sets join to send for a channel
message NatsChannelSetJoinToSendRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelSetJoinToSendRequest data = 2;
}

// ********** Channel_SetJoinToApprove ********** //
// Backend NATS messaging for `Channel_SetJoinToApprove`: Sets join to approve for a channel
message NatsChannelSetJoinApprovalRequiredRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelSetJoinApprovalRequiredRequest data = 2;
}

// ********** Channel_Join ********** //
// Backend NATS messaging for `Channel_Join`: Joins a channel
message NatsChannelJoinRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelJoinRequest data = 2;
}

message NatsChannelJoinResponse {
  oneof msg {
    ChannelJoinResponse data = 1;
    runtiva.nats.v1.ErrorReply error = 2;
  }
}

// ********** Channel_Leave ********** //
// Backend NATS messaging for `Channel_Leave`: Leaves a channel
message NatsChannelLeaveRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelLeaveRequest data = 2;
}

// ********** Channel_ActionJoinRequest ********** //
// Backend NATS messaging for `Channel_ActionJoinRequest`: Approves or rejects a join request
message NatsChannelActionJoinRequestRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ChannelActionJoinRequestRequest data = 2;
}

// ********** Channel_ExportInvite ********** //
// Backend NATS messaging for `Channel_ExportInvite`: Exports an invite link for a channel
// message NatsChannelExportInviteRequest {
//   repeated MetadataMap headers = 1;
//   ChannelExportInviteRequest data = 2;
// }
