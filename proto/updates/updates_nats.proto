syntax = "proto3";

package chat;

import "chat/chat_inputs.proto";
import "chat/chat.proto";

import "error_reply.proto";
import "nats_metadata.proto";

// NATS Specific messages that are used internally on the server-side to offboard request processing 
// from the ChatServer to the backend services. 

// ************ RegisterUpdatesConnection ************ //
// Backend NATS messaging for `ConnectForUpdates`: When a client makes a 
// `ConnectForUpdates` method call to the chat-server, the chat-server in turn
// makes an internal NATS request register the connection in the shared REDIS Presence cache.
message NatsRegisterUpdatesConnectionRequest {
  repeated MetadataMap headers = 1;
  UpdatesConnection data = 2;
}

message UpdatesConnection {
  // user_id of the user who is connected for updates
  int64 user_id = 1;
  // unique client app name that recieves the updates 
  string app = 2;
  // host:port of the chat server that owns the connection
  string chat_server = 3;
  }

// ************ RegisterOnPeerList ************ //
// Backend NATS messaging for `ActiveOnPeerList`: When a client makes a 
// `ActiveOnPeerList` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to register the peer-list as active for this 
// connection with the shared REDIS Presence cache.
// This is used to determine who should receive is typing notifications.
message NatsRegisterOnPeerList {
  repeated MetadataMap headers = 1;
  UpdatesConnection data = 2;
}

// ************ UnregisterFromPeerList ************ //
// Backend NATS messaging for `ActiveOnPeerList`: When a client makes a 
// `ActiveOnPeerList` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to register the peer-list as active for this 
// connection with the shared REDIS Presence cache.
// This is used to determine who should receive is typing notifications.
message NatsUnregisterFromPeerList {
  repeated MetadataMap headers = 1;
  UpdatesConnection data = 2;
}


// ************ RegisterOnPeer ************ //
// Backend NATS messaging for `ActiveOnPeer`: When a client makes a 
// `ActiveOnPeer` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to register the current active Peer with the shared REDIS Presence cache.
// This is used to determine who should receive is typing notifications.
message NatsRegisterOnPeer {
  repeated MetadataMap headers = 1;
  ConnectionPeer data = 2;
}

message ConnectionPeer {
  // owning connection for this request
  UpdatesConnection connection = 1;
  // peer_id of the peer that is active
  int64 peer_id = 2;
}

// ************ UnregisterFromPeer ************ //
// Backend NATS messaging for `LeavePeer`: When a client makes a 
// `LeavePeer` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to unregister the current active Peer with the shared REDIS Presence cache.
// This is used to stop sending is typing notifications to this connection.
message NatsUnregisterFromPeer {
  repeated MetadataMap headers = 1;
  ConnectionPeer data = 2;
}
