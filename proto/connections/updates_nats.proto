syntax = "proto3";

package runtiva.connections.v1;

import "nats/v1/common.proto";

// NATS Specific messages that are used internally on the server-side to offboard request processing 
// from the ChatServer to the backend services. 

// ************ RegisterUpdatesConnection ************ //
// Backend NATS messaging for `Connect`: When a client makes a 
// `ConnectForUpdates` method call to the chat-server, the chat-server in turn
// makes an internal NATS request register the connection in the shared REDIS Presence cache.
message NatsUpdatesConnectRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  UpdatesConnection data = 2;
}

// ************ UnregisterUpdatesConnection ************ //
// Backend NATS messaging to close an Updates connection when it is disconnected
// There is no cooresponding client method call for this message as it is triggered by the connection closing.
message NatsUpdatesCloseRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  UpdatesConnection data = 2;
}

message UpdatesConnection {
  UpdatesConnectionKey connection_key = 1;
  // host:port of the chat server that owns the connection
  string chat_server = 3;
}

message UpdatesConnectionKey {
  // user_id of the user who is connected for updates
  int64 user_id = 1;
  // unique client app name that recieves the updates 
  string app_id = 2;
}

// ************ RegisterOnPeerList ************ //
// Backend NATS messaging for `RegisterOnPeerList`: When a client makes a 
// `RegisterOnPeerList` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to register the peer-list as active for this 
// connection with the shared REDIS Presence cache.
// This is used to determine who should receive is typing notifications.
message NatsRegisterOnPeerListRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  UpdatesConnectionKey data = 2;
}

// ************ UnregisterFromPeerList ************ //
// Backend NATS messaging for `UnregisterFromPeerList`: When a client makes a 
// `UnregisterFromPeerList` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to register the peer-list as active for this 
// connection with the shared REDIS Presence cache.
// This is used to determine who should receive is typing notifications.
message NatsUnregisterFromPeerListRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  UpdatesConnectionKey data = 2;
}


// ************ RegisterOnPeer ************ //
// Backend NATS messaging for `RegisterOnPeer`: When a client makes a 
// `RegisterOnPeer` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to register the current active Peer with the shared REDIS Presence cache.
// This is used to determine who should receive is typing notifications.
message NatsRegisterOnPeerRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ConnectionPeer data = 2;
}

message ConnectionPeer {
  // updates connection key associated with this peer registration
  UpdatesConnectionKey connection_key = 1;
  // peer_id of the peer that is active
  int64 peer_id = 2;
}

// ************ UnregisterFromPeer ************ //
// Backend NATS messaging for `LeaveUnregisterFromPeerPeer`: When a client makes a 
// `UnregisterFromPeer` method call to the chat-server, the chat-server in turn
// makes an internal NATS request to unregister the current active Peer with the shared REDIS Presence cache.
// This is used to stop sending is typing notifications to this connection.
message NatsUnregisterFromPeerRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  ConnectionPeer data = 2;
}

// ************ GetConnectionsForUsers ************ //
// Backend NATS messaging for `GetConnectionsRequest`: This is primarily used by 
// the chat-distro service to get the list of connections for pushing updates to clients.
message NatsGetConnectionsRequest {
  repeated runtiva.nats.v1.MetadataMap headers = 1;
  GetConnectionsRequest data = 2;
}

message GetConnectionsRequest {
  // list of user_ids to get connections for
  repeated int64 user_ids = 1;
}

message NatsGetConnectionsResponse {
  oneof msg {
    GetConnectionsResponse data = 1;
    runtiva.nats.v1.ErrorReply error = 2;
  }
}

message GetConnectionsResponse {
  // list of user connections for the requested user_ids
  repeated UserConnections user_connections = 1;
}

message UserConnections {
  int64 user_id = 1;
  repeated UserConnection connections = 2;
}

message UserConnection {
  // user_id:app_id
  string conn_key = 2;
  // host:port of the chat server that owns the connection
  string chat_server = 3;
}
